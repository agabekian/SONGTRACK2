@model List<Recordis>
@using FileTypeChecker
@using FileTypeChecker.Abstracts;
@using FileTypeChecker.Extensions;
@using FileTypeChecker.Types;
@using System.IO;

<a class="text-decoration-none" id="scaleContainer" href="/new-track">
    <i class="fa fa-plus" style="color:white"></i>
</a>

<div id="sortable_table_wrapper">
    <table class="table" style="color:white">
        <thead>
        <tr>
            <th class="bg-secondary sort" data-sort="nums">#</th>
            <th class="bg-secondary date sort" data-sort="title">TITLE/INFO</th>
            <th class="bg-secondary date sort" data-sort="artist">ARTIST</th>
            <th class="bg-secondary date sort" data-sort="filesize">FILESIZE</th>
            <th class="bg-secondary date sort" data-sort="tools">TOOLS</th>
            <th class="bg-secondary date sort" data-sort="comments">COMMENTS</th>
            <th class="bg-secondary date">VERSIONS</th>
            <th class="bg-secondary date sort" data-sort="postdate">POST DATE</th>
            <th class="bg-secondary date">ACTIONS</th>
        </tr>
        </thead>

        <tbody class="list">
        @{
            int i = 1;
            foreach (Recordis t in @Model)
            {
                string sr = null;

                if (t.MediaFilePath != null)
                {
                    var cut = t.MediaFilePath.Split("wwwroot");
                    sr = cut.Length > 1 ? cut[1] : null; // Ensure there is a valid split
                }

                <tr>
                    <th scope="row">
                        @i
                        <a href="/track/play/@t.RecordisId">
                            <i class="fas fa-file-export" aria-hidden="true"></i>
                        </a>
                        @try
                        {
                            using (var fileStream = File.OpenRead(t.MediaFilePath))
                            {
                                var isRecognizableType = FileTypeValidator.IsTypeRecognizable(fileStream);

                                if (!isRecognizableType)
                                {
                                    Console.WriteLine("Tis a weird file - forbidden!");
                                }

                                IFileType fileType = FileTypeValidator.GetFileType(fileStream);

                                // Check for MP3
                                if (fileType.Extension == "mp3")
                                {
                                    <audio controls>
                                        <source src="@Url.Content(sr)" type='audio/mpeg'>
                                        Your browser does not support the audio element.
                                    </audio>
                                }

                                // Check if the file is an image
                                if (fileStream.IsImage())
                                {
                                    <a href="/track/play/@t.RecordisId">
                                        <img src="@Url.Content(sr)" alt="@t.title" height="30" onerror="this.src='/images/default-image.png';">
                                    </a>
                                }

                                Console.WriteLine("Type Name: {0}", fileType.Name);
                                Console.WriteLine("Type Extension: {0}", fileType.Extension);
                                Console.WriteLine("Is Image?: {0}", fileStream.IsImage());
                                Console.WriteLine("Is Bitmap?: {0}", fileStream.Is<Bitmap>());
                            }
                        }
                        catch (DirectoryNotFoundException dirEx)
                        {
                            Console.WriteLine("Dashboard error " + dirEx.Message);
                            <div class="alert alert-danger" role="alert">
                                Error loading file. Please try again later.
                            </div>
                        }
                    </th>
                    <td>
                        <a class="text-decoration-none text-white border border-secondary rounded title" href="/track/@t.RecordisId">@t.title</a>
                    </td>
                    <td class="font-fancy artist">@t.artist</td>
                    <td class="filesize" style="font-size: 0.8rem;">@t.length</td>
                    <td class="tools"> @* displays tools used *@
                        @foreach (var g in t.Gears)
                        {
                            <a href="/gear/@g.GearId/info/" 
                               class="border border-info rounded link-warning text-decoration-none">
                                @g.Gear.title
                            </a>
                            @if (g != t.Gears.Last())
                            {
                                @Html.Raw("&nbsp;") // Render a non-breaking space
                            }
                        }
                    </td>

                    <td class="comments"><a> @t.Comments.Count </a></td>
                    <td>@(t.Aversions?.Count ?? 0)</td>
                    <td class="date">@t.CreatedAt</td>
                    <td>
                        <a class="btn btn-warning text-decoration-none" href="@t.RecordisId/comment">
                            <i style="color:white" class="fa fa-comment" aria-hidden="true"></i>
                        </a>
                        <a href="/edit/track/@t.RecordisId" class="btn btn-success text-decoration-none">
                            <i style="color: white" class="fa fa-edit"></i>
                        </a>
                        <partial name="_delete" model="@t"/>
                    </td>
                </tr>
                i++;
            }
        }
        </tbody>
    </table>
    <input class="search" style="display:block; border-radius:5px; text-align:center; margin: 0 auto 10px;" placeholder="Filter by keyword">
</div>

<script>
    
    const options = 
    {
        valueNames: ['title', 'test', 'artist', 'filesize', 'tools', 'comments']
    };
    const sortable_table_wrapper = new List('sortable_table_wrapper', options);
    sortable_table_wrapper.sort("title", { order: "title" });

</script>

@section Scripts
{
    <script src="~/js/site.js"></script>
    <script src="~/js/list.js"></script>
}